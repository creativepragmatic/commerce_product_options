<?php

/**
 * @file
 * Contains commerce_product_options.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function commerce_product_options_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_product_options module.
    case 'help.page.commerce_product_options':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows text fields, checkboxes, price-modifying select elements and other products to be added to a product&#039;s &#039;Add to cart&#039; form.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_type_build().
 */
function commerce_product_options_entity_type_build(array &$entity_types) {
  $entity_types['commerce_order_item']->setFormClass('add_to_cart', '\Drupal\commerce_product_options\Form\AddToCartForm');
}

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_product_options_entity_base_field_info(EntityTypeInterface $entity_type) {

  if ($entity_type->id() === 'commerce_product') {

    $fields['options'] = BaseFieldDefinition::create('map')
      ->setLabel(t('Product Options'))
      ->setDescription(t('A serialized array of product option fields.'));

    return $fields;
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function commerce_product_options_entity_operation_alter(array &$operations, EntityInterface $entity) {

  if (!(\Drupal::currentUser()->hasPermission('access commerce administration pages'))) {
    return;
  }

  if ($entity->getEntityTypeId() === 'commerce_product') {
    $operations['options'] = [
      'title' => 'Options',
      'url' => Url::fromRoute('commerce_product_options.controller', ['commerce_product' => $entity->id()]),
      'weight' => 10,
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function commerce_product_options_commerce_order_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $build['order_items']['#formatter'] = 'commerce_product_options_order_item_table';
  $build['order_items'][0]['#name'] = 'commerce_product_options_order_item_table';
}

/**
 * Implements hook_theme().
 */
function commerce_product_options_theme() {
  return [
    'commerce_product_options' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function commerce_product_options_user_insert(EntityInterface $entity) {
  $entity->set('field_driver_class', 'NFT');
  $entity->set('field_first_name', ucfirst($entity->get('field_first_name')->value));
  $entity->set('field_last_name', ucfirst($entity->get('field_last_name')->value));
  $entity->save();
}
